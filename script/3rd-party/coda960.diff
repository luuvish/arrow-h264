diff -urwN coda-v1.0.0/design/ref_c coda-v1.0.0/design/ref_c
--- src/dec_h264/MainAvcDec.c	2010-01-27 22:39:55.000000000 +0900
+++ src/dec_h264/MainAvcDec.c	2013-05-12 01:30:08.000000000 +0900
@@ -1,5 +1,8 @@
 
 #include "AvcDec.h"
+#include "md5.h"
+
+#define PLATFORM_CHECKSUM_MD5 1
 
 #define VERSION_STR      "1.20"
 
@@ -31,12 +34,19 @@
 	int  EnPicInfo;
 	int	 EnSeqInfo;
 #endif
+#ifdef PLATFORM_CHECKSUM_MD5
+	int  CheckSumMD5En;
+#endif
 } ARG;
 
 static void writeImage(FILE *fp, BYTE *pYuv, BYTE* pDer, BYTE* pRot, int sizeX, int sizeY,
 					   int DeringEn, int modeRot, int chromaIdc);
 static void writeImageCrop(FILE *fp, SEQ_INFO *pSeqInfo, BYTE* pDer, BYTE* pRot, int sizeX, int sizeY,
 					   int DeringEn, int modeRot, int chromaIdc);
+#ifdef PLATFORM_CHECKSUM_MD5
+static void writeCheckSumMD5(FILE *fp, SEQ_INFO *pSeqInfo, BYTE* pDer, BYTE* pRot, int sizeX, int sizeY,
+                       int DeringEn, int modeRot, int chromaIdc);
+#endif
 static int  parseArg(int argc, char **argv, ARG *pArg);
 
 #ifdef WIN32
@@ -82,6 +92,9 @@
 	arg.EnPicInfo = 0;
 	arg.EnSeqInfo = 0;
 #endif
+#ifdef PLATFORM_CHECKSUM_MD5
+	arg.CheckSumMD5En = 0;
+#endif
 
     #ifdef TOP_SIM_REF
         fprintf(stdout, "H.264 HP Decoder with Reference Data Generation V%s\n", VERSION_STR);
@@ -103,6 +116,9 @@
         fprintf(stderr, "      [-s #] : set a file name for motion compensation report(default off)\n");
 		fprintf(stderr, "      [-w #] : set a trace-out frame number to be started\n");
 		fprintf(stderr, "      [-u #] : enable dump files of USRDATA, MBINFO, MVINFO\n");
+#ifdef PLATFORM_CHECKSUM_MD5
+		fprintf(stderr, "      [-5  ] : dump md5 checksum instead of image output (default disable)\n");
+#endif
         return 1;
     }
 
@@ -117,7 +133,12 @@
         return 1;
     }
 
-    fpOut = fopen(outFileName, "wb");
+#ifdef PLATFORM_CHECKSUM_MD5
+    if (arg.CheckSumMD5En)
+    	fpOut = fopen(outFileName, "wt");
+    else
+#endif
+    	fpOut = fopen(outFileName, "wb");
     if (fpOut == NULL) {
         fprintf(stderr, "File create error <%s>\n", outFileName);
         return 1;
@@ -200,9 +221,15 @@
         if (seqInfo.YuvBufPtr == NULL)
             Error("YUV BUF PTR ERROR\n");
 
+#ifdef PLATFORM_CHECKSUM_MD5
+        if (arg.CheckSumMD5En)
+            writeCheckSumMD5(fpOut, &seqInfo, seqInfo.DerBufPtr, seqInfo.RotBufPtr, picX, picY,
+                             arg.DeringEn, arg.RotMode, seqInfo.ChromaFormatIDC);
+        else
+#endif
 		if (seqInfo.FrameCropFlag==1 && arg.EnableFrameCrop==1)
             writeImageCrop(fpOut, &seqInfo, seqInfo.DerBufPtr, seqInfo.RotBufPtr, picX, picY,
-						arg.DeringEn, arg.RotMode, seqInfo.ChromaFormatIDC);
+						   arg.DeringEn, arg.RotMode, seqInfo.ChromaFormatIDC);
 		else
 			writeImage(fpOut, seqInfo.YuvBufPtr, seqInfo.DerBufPtr, seqInfo.RotBufPtr, picX, picY,
 					    arg.DeringEn, arg.RotMode, seqInfo.ChromaFormatIDC);
@@ -332,6 +359,89 @@
 	fflush(fp);
 }
 
+#ifdef PLATFORM_CHECKSUM_MD5
+static void writeCheckSumMD5(FILE *fp, SEQ_INFO *pSeqInfo, BYTE* pDer, BYTE* pRot, int sizeX, int sizeY,
+					   int DeringEn, int modeRot, int chromaIdc)
+{
+	MD5_CTX md5ctx;
+	unsigned char md[MD5_DIGEST_LENGTH];
+
+	int i;
+	BYTE *pOutImg, *pYuv;
+
+    int cropX, cropY;
+    int SubWidthC[4]  = {1, 2, 2, 1};
+    int SubHeightC[4] = {1, 2, 1, 1};
+
+	if(DeringEn){
+		if(modeRot){
+			// ROTATE
+			RotVop(pDer, pRot, modeRot);
+			pOutImg = pRot;
+		}
+		else
+			pOutImg = pDer;
+	}
+	else {
+		if(modeRot){
+			// ROTATE
+			RotVop(pSeqInfo->YuvBufPtr, pRot, modeRot&0x0F);
+			pOutImg = pRot;
+		}
+		else
+			pOutImg = pSeqInfo->YuvBufPtr;
+	}
+
+	MD5_Init(&md5ctx);
+
+	pYuv = pOutImg;
+    chromaIdc = pSeqInfo->ChromaFormatIDC;
+
+    cropY = sizeY - (pSeqInfo->CropBottom+pSeqInfo->CropTop)*SubHeightC[chromaIdc];
+	cropX = sizeX - (pSeqInfo->CropRight+pSeqInfo->CropLeft)*SubWidthC[chromaIdc];
+	pYuv += sizeX*pSeqInfo->CropTop*SubHeightC[chromaIdc];
+	pYuv += pSeqInfo->CropLeft*SubWidthC[chromaIdc]; 
+	for (i=0; i<cropY; i++) {
+		MD5_Update(&md5ctx, pYuv, cropX);
+		pYuv += sizeX;
+	}
+	
+	if (chromaIdc == 1) {
+		cropY /= 2;
+		cropX /= 2;
+		pYuv =  pSeqInfo->YuvBufPtr + sizeX*sizeY;
+		pYuv += pSeqInfo->CropLeft;
+		pYuv += sizeX/2*pSeqInfo->CropTop;
+		for (i=0; i<cropY; i++) {
+			MD5_Update(&md5ctx, pYuv, cropX);
+			pYuv += sizeX/2;
+		}
+		
+		pYuv =  pSeqInfo->YuvBufPtr + sizeX*sizeY*(chromaIdc+4)/4;
+		pYuv += pSeqInfo->CropLeft;
+		pYuv += sizeX/2*pSeqInfo->CropTop;
+		for (i=0; i<cropY; i++) {
+			MD5_Update(&md5ctx, pYuv, cropX);
+			pYuv += sizeX/2;
+		}
+	}
+
+    #ifndef MONOCHROME_OUTPUT
+    if (chromaIdc == 0) {
+		pYuv = pSeqInfo->YuvBufPtr;
+        memset(pRot, 0x80, cropX);
+        for(i=0; i<cropY/2; i++)
+			MD5_Update(&md5ctx, pRot, cropX);
+    }
+	#endif
+
+    MD5_Final(md, &md5ctx);
+    for (i=0; i<MD5_DIGEST_LENGTH; i++)
+        fprintf(fp, "%02x", md[i]);
+	fprintf(fp, "\n");
+	fflush(fp);
+}
+#endif
 
 static int  parseArg(int argc, char **argv, ARG *pArg)
 {
@@ -440,6 +550,13 @@
 					pArg->EnSeqInfo= 1;
 					break;
 #endif
+#ifdef PLATFORM_CHECKSUM_MD5
+                case '5':
+                    if (s[2] != 0)
+                        return 0;
+                    pArg->CheckSumMD5En = 1;
+                    break;
+#endif
                 default:
                     return 0;
             }

--- src/dec_h264/md5.c	1970-01-01 09:00:00.000000000 +0900
+++ src/dec_h264/md5.c	2013-05-12 01:16:49.000000000 +0900
@@ -0,0 +1,281 @@
+#include "md5.h"
+
+#define DATA_ORDER_IS_LITTLE_ENDIAN
+
+#define	HASH_MAKE_STRING(c,s)	do {	\
+	unsigned long ll;		\
+	ll=(c)->A; HOST_l2c(ll,(s));	\
+	ll=(c)->B; HOST_l2c(ll,(s));	\
+	ll=(c)->C; HOST_l2c(ll,(s));	\
+	ll=(c)->D; HOST_l2c(ll,(s));	\
+	} while (0)
+
+#define ROTATE(a,n)     (((a)<<(n))|(((a)&0xffffffff)>>(32-(n))))
+
+#if defined(DATA_ORDER_IS_BIG_ENDIAN)
+#define HOST_c2l(c,l) \
+	(l =(((unsigned long)(*((c)++)))<<24),		\
+	 l|=(((unsigned long)(*((c)++)))<<16),		\
+	 l|=(((unsigned long)(*((c)++)))<< 8),		\
+	 l|=(((unsigned long)(*((c)++)))    ),		\
+	 l)
+#define HOST_l2c(l,c) \
+	(*((c)++)=(unsigned char)(((l)>>24)&0xff),	\
+	 *((c)++)=(unsigned char)(((l)>>16)&0xff),	\
+	 *((c)++)=(unsigned char)(((l)>> 8)&0xff),	\
+	 *((c)++)=(unsigned char)(((l)    )&0xff),	\
+	 l)
+#endif
+#if defined(DATA_ORDER_IS_LITTLE_ENDIAN)
+#define HOST_c2l(c,l) \
+	(l =(((unsigned long)(*((c)++)))    ),		\
+	 l|=(((unsigned long)(*((c)++)))<< 8),		\
+	 l|=(((unsigned long)(*((c)++)))<<16),		\
+	 l|=(((unsigned long)(*((c)++)))<<24),		\
+	 l)
+#define HOST_l2c(l,c) \
+	(*((c)++)=(unsigned char)(((l)    )&0xff),	\
+	 *((c)++)=(unsigned char)(((l)>> 8)&0xff),	\
+	 *((c)++)=(unsigned char)(((l)>>16)&0xff),	\
+	 *((c)++)=(unsigned char)(((l)>>24)&0xff),	\
+	 l)
+#endif
+
+#define MD32_REG_T long
+
+#define	F(b,c,d)	((((c) ^ (d)) & (b)) ^ (d))
+#define	G(b,c,d)	((((b) ^ (c)) & (d)) ^ (c))
+#define	H(b,c,d)	((b) ^ (c) ^ (d))
+#define	I(b,c,d)	(((~(d)) | (b)) ^ (c))
+
+#define R0(a,b,c,d,k,s,t) { \
+	a+=((k)+(t)+F((b),(c),(d))); \
+	a=ROTATE(a,s); \
+	a+=b; };
+#define R1(a,b,c,d,k,s,t) { \
+	a+=((k)+(t)+G((b),(c),(d))); \
+	a=ROTATE(a,s); \
+	a+=b; };
+#define R2(a,b,c,d,k,s,t) { \
+	a+=((k)+(t)+H((b),(c),(d))); \
+	a=ROTATE(a,s); \
+	a+=b; };
+#define R3(a,b,c,d,k,s,t) { \
+	a+=((k)+(t)+I((b),(c),(d))); \
+	a=ROTATE(a,s); \
+	a+=b; };
+
+void md5_block_data_order (MD5_CTX *c, const void *data_, size_t num)
+{
+	const unsigned char *data=data_;
+	register unsigned MD32_REG_T A,B,C,D,l;
+#ifndef MD32_XARRAY
+	/* See comment in crypto/sha/sha_locl.h for details. */
+	unsigned MD32_REG_T	XX0, XX1, XX2, XX3, XX4, XX5, XX6, XX7,
+						XX8, XX9,XX10,XX11,XX12,XX13,XX14,XX15;
+# define X(i)	XX##i
+#else
+	MD5_LONG XX[MD5_LBLOCK];
+# define X(i)	XX[i]
+#endif
+
+	A=c->A;
+	B=c->B;
+	C=c->C;
+	D=c->D;
+
+	for (;num--;) {
+		HOST_c2l(data,l); X( 0)=l;		HOST_c2l(data,l); X( 1)=l;
+		/* Round 0 */
+		R0(A,B,C,D,X( 0), 7,0xd76aa478L);	HOST_c2l(data,l); X( 2)=l;
+		R0(D,A,B,C,X( 1),12,0xe8c7b756L);	HOST_c2l(data,l); X( 3)=l;
+		R0(C,D,A,B,X( 2),17,0x242070dbL);	HOST_c2l(data,l); X( 4)=l;
+		R0(B,C,D,A,X( 3),22,0xc1bdceeeL);	HOST_c2l(data,l); X( 5)=l;
+		R0(A,B,C,D,X( 4), 7,0xf57c0fafL);	HOST_c2l(data,l); X( 6)=l;
+		R0(D,A,B,C,X( 5),12,0x4787c62aL);	HOST_c2l(data,l); X( 7)=l;
+		R0(C,D,A,B,X( 6),17,0xa8304613L);	HOST_c2l(data,l); X( 8)=l;
+		R0(B,C,D,A,X( 7),22,0xfd469501L);	HOST_c2l(data,l); X( 9)=l;
+		R0(A,B,C,D,X( 8), 7,0x698098d8L);	HOST_c2l(data,l); X(10)=l;
+		R0(D,A,B,C,X( 9),12,0x8b44f7afL);	HOST_c2l(data,l); X(11)=l;
+		R0(C,D,A,B,X(10),17,0xffff5bb1L);	HOST_c2l(data,l); X(12)=l;
+		R0(B,C,D,A,X(11),22,0x895cd7beL);	HOST_c2l(data,l); X(13)=l;
+		R0(A,B,C,D,X(12), 7,0x6b901122L);	HOST_c2l(data,l); X(14)=l;
+		R0(D,A,B,C,X(13),12,0xfd987193L);	HOST_c2l(data,l); X(15)=l;
+		R0(C,D,A,B,X(14),17,0xa679438eL);
+		R0(B,C,D,A,X(15),22,0x49b40821L);
+		/* Round 1 */
+		R1(A,B,C,D,X( 1), 5,0xf61e2562L);
+		R1(D,A,B,C,X( 6), 9,0xc040b340L);
+		R1(C,D,A,B,X(11),14,0x265e5a51L);
+		R1(B,C,D,A,X( 0),20,0xe9b6c7aaL);
+		R1(A,B,C,D,X( 5), 5,0xd62f105dL);
+		R1(D,A,B,C,X(10), 9,0x02441453L);
+		R1(C,D,A,B,X(15),14,0xd8a1e681L);
+		R1(B,C,D,A,X( 4),20,0xe7d3fbc8L);
+		R1(A,B,C,D,X( 9), 5,0x21e1cde6L);
+		R1(D,A,B,C,X(14), 9,0xc33707d6L);
+		R1(C,D,A,B,X( 3),14,0xf4d50d87L);
+		R1(B,C,D,A,X( 8),20,0x455a14edL);
+		R1(A,B,C,D,X(13), 5,0xa9e3e905L);
+		R1(D,A,B,C,X( 2), 9,0xfcefa3f8L);
+		R1(C,D,A,B,X( 7),14,0x676f02d9L);
+		R1(B,C,D,A,X(12),20,0x8d2a4c8aL);
+		/* Round 2 */
+		R2(A,B,C,D,X( 5), 4,0xfffa3942L);
+		R2(D,A,B,C,X( 8),11,0x8771f681L);
+		R2(C,D,A,B,X(11),16,0x6d9d6122L);
+		R2(B,C,D,A,X(14),23,0xfde5380cL);
+		R2(A,B,C,D,X( 1), 4,0xa4beea44L);
+		R2(D,A,B,C,X( 4),11,0x4bdecfa9L);
+		R2(C,D,A,B,X( 7),16,0xf6bb4b60L);
+		R2(B,C,D,A,X(10),23,0xbebfbc70L);
+		R2(A,B,C,D,X(13), 4,0x289b7ec6L);
+		R2(D,A,B,C,X( 0),11,0xeaa127faL);
+		R2(C,D,A,B,X( 3),16,0xd4ef3085L);
+		R2(B,C,D,A,X( 6),23,0x04881d05L);
+		R2(A,B,C,D,X( 9), 4,0xd9d4d039L);
+		R2(D,A,B,C,X(12),11,0xe6db99e5L);
+		R2(C,D,A,B,X(15),16,0x1fa27cf8L);
+		R2(B,C,D,A,X( 2),23,0xc4ac5665L);
+		/* Round 3 */
+		R3(A,B,C,D,X( 0), 6,0xf4292244L);
+		R3(D,A,B,C,X( 7),10,0x432aff97L);
+		R3(C,D,A,B,X(14),15,0xab9423a7L);
+		R3(B,C,D,A,X( 5),21,0xfc93a039L);
+		R3(A,B,C,D,X(12), 6,0x655b59c3L);
+		R3(D,A,B,C,X( 3),10,0x8f0ccc92L);
+		R3(C,D,A,B,X(10),15,0xffeff47dL);
+		R3(B,C,D,A,X( 1),21,0x85845dd1L);
+		R3(A,B,C,D,X( 8), 6,0x6fa87e4fL);
+		R3(D,A,B,C,X(15),10,0xfe2ce6e0L);
+		R3(C,D,A,B,X( 6),15,0xa3014314L);
+		R3(B,C,D,A,X(13),21,0x4e0811a1L);
+		R3(A,B,C,D,X( 4), 6,0xf7537e82L);
+		R3(D,A,B,C,X(11),10,0xbd3af235L);
+		R3(C,D,A,B,X( 2),15,0x2ad7d2bbL);
+		R3(B,C,D,A,X( 9),21,0xeb86d391L);
+
+		A = c->A += A;
+		B = c->B += B;
+		C = c->C += C;
+		D = c->D += D;
+	}
+}
+
+/* Implemented from RFC1321 The MD5 Message-Digest Algorithm
+ */
+
+#define INIT_DATA_A (unsigned long)0x67452301L
+#define INIT_DATA_B (unsigned long)0xefcdab89L
+#define INIT_DATA_C (unsigned long)0x98badcfeL
+#define INIT_DATA_D (unsigned long)0x10325476L
+
+int MD5_Init (MD5_CTX *c)
+{
+	c->A=INIT_DATA_A;
+	c->B=INIT_DATA_B;
+	c->C=INIT_DATA_C;
+	c->D=INIT_DATA_D;
+	c->Nl=0;
+	c->Nh=0;
+	c->num=0;
+	return 1;
+}
+
+int MD5_Update (MD5_CTX *c, const void *data_, size_t len)
+{
+	const unsigned char *data=data_;
+	unsigned char *p;
+	MD5_LONG l;
+	size_t n;
+
+	if (len==0) return 1;
+
+	l=(c->Nl+(((MD5_LONG)len)<<3))&0xffffffffUL;
+	/* 95-05-24 eay Fixed a bug with the overflow handling, thanks to
+	 * Wei Dai <weidai@eskimo.com> for pointing it out. */
+	if (l < c->Nl) /* overflow */
+		c->Nh++;
+	c->Nh+=(len>>29);	/* might cause compiler warning on 16-bit */
+	c->Nl=l;
+
+	n = c->num;
+	if (n != 0) {
+		p=(unsigned char *)c->data;
+
+		if (len >= MD5_CBLOCK || len+n >= MD5_CBLOCK) {
+			memcpy (p+n,data,MD5_CBLOCK-n);
+			md5_block_data_order (c,p,1);
+			n      = MD5_CBLOCK-n;
+			data  += n;
+			len   -= n;
+			c->num = 0;
+			memset (p,0,MD5_CBLOCK);	/* keep it zeroed */
+		} else {
+			memcpy (p+n,data,len);
+			c->num += (unsigned int)len;
+			return 1;
+		}
+	}
+
+	n = len/MD5_CBLOCK;
+	if (n > 0) {
+		md5_block_data_order (c,data,n);
+		n    *= MD5_CBLOCK;
+		data += n;
+		len  -= n;
+	}
+
+	if (len != 0) {
+		p = (unsigned char *)c->data;
+		c->num = len;
+		memcpy (p,data,len);
+	}
+	return 1;
+}
+
+int MD5_Final (unsigned char *md, MD5_CTX *c)
+{
+	unsigned char *p = (unsigned char *)c->data;
+	size_t n = c->num;
+
+	p[n] = 0x80; /* there is always room for one */
+	n++;
+
+	if (n > (MD5_CBLOCK-8)) {
+		memset (p+n,0,MD5_CBLOCK-n);
+		n=0;
+		md5_block_data_order (c,p,1);
+	}
+	memset (p+n,0,MD5_CBLOCK-8-n);
+
+	p += MD5_CBLOCK-8;
+#if   defined(DATA_ORDER_IS_BIG_ENDIAN)
+	(void)HOST_l2c(c->Nh,p);
+	(void)HOST_l2c(c->Nl,p);
+#elif defined(DATA_ORDER_IS_LITTLE_ENDIAN)
+	(void)HOST_l2c(c->Nl,p);
+	(void)HOST_l2c(c->Nh,p);
+#endif
+	p -= MD5_CBLOCK;
+	md5_block_data_order (c,p,1);
+	c->num=0;
+	memset (p,0,MD5_CBLOCK);
+
+	HASH_MAKE_STRING(c,md);
+
+	return 1;
+}
+
+unsigned char *MD5 (const unsigned char *d, size_t n, unsigned char *md)
+{
+	MD5_CTX c;
+	static unsigned char m[MD5_DIGEST_LENGTH];
+
+	if (md == NULL) md=m;
+	if (!MD5_Init(&c))
+		return NULL;
+	MD5_Update(&c,d,n);
+	MD5_Final(md,&c);
+	return(md);
+}

--- src/dec_h264/md5.h	1970-01-01 09:00:00.000000000 +0900
+++ src/dec_h264/md5.h	2013-05-12 01:16:49.000000000 +0900
@@ -0,0 +1,32 @@
+#ifndef HEADER_MD5_H
+#define HEADER_MD5_H
+
+#include <string.h>
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+#define MD5_LONG unsigned int
+
+#define MD5_CBLOCK	64
+#define MD5_LBLOCK	(MD5_CBLOCK/4)
+#define MD5_DIGEST_LENGTH 16
+
+typedef struct MD5state_st {
+	MD5_LONG A,B,C,D;
+	MD5_LONG Nl,Nh;
+	MD5_LONG data[MD5_LBLOCK];
+	unsigned int num;
+} MD5_CTX;
+
+int MD5_Init(MD5_CTX *c);
+int MD5_Update(MD5_CTX *c, const void *data, size_t len);
+int MD5_Final(unsigned char *md, MD5_CTX *c);
+unsigned char *MD5(const unsigned char *d, size_t n, unsigned char *md);
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif

--- src/dec_vpx/makefile	2010-10-22 17:32:34.000000000 +0900
+++ src/dec_vpx/makefile	2013-05-24 18:54:45.000000000 +0900
@@ -27,8 +27,8 @@
 
 CDEFS :=
 #OPT_CCOV = -fprofile-arcs -ftest-coverage
-CFLAGS_COMMON = -g -Wall --save-temps -m32 $(DEFS) $(CDEFS)
-# CFLAGS_COMMON = -g -Wall --save-temps -m32 $(OPT_CCOV) $(DEFS) 
+CFLAGS_COMMON = -Wall --save-temps -m32 $(DEFS) $(CDEFS)
+#CFLAGS_COMMON = -g -Wall --save-temps -m32 $(OPT_CCOV) $(CDEFS) 
 
 TARGET := blackbird
 SRCDIR := ./src

--- src/dec_vpx/src/codecs/sys/sys.h	2010-10-18 13:48:56.000000000 +0900
+++ src/dec_vpx/src/codecs/sys/sys.h	2013-05-24 18:13:28.000000000 +0900
@@ -28,13 +28,7 @@
 #include <stdlib.h>
 #include <string.h>
 
-#if defined(HAVE_STDINT_H)
 #include <stdint.h>
-#elif defined(SUNOS)
-#include <inttypes.h>
-#else
-#include "../sys/stdint.h"
-#endif
 
 #ifdef __cplusplus
 extern "C" {

--- src/dec_vpx/src/codecs/vpu/bpu/bpu_vp8_wrap_mb.h	2010-11-05 18:24:26.000000000 +0900
+++ src/dec_vpx/src/codecs/vpu/bpu/bpu_vp8_wrap_mb.h	2013-05-24 18:17:28.000000000 +0900
@@ -21,13 +21,7 @@
 //
 //--=========================================================================--
 
-#if defined(HAVE_STDINT_H)
-#include <stdint.h>
-#elif defined(SUNOS)
-#include <inttypes.h>
-#else
-#include "../../sys/stdint.h"
-#endif
+#include "../../sys/sys.h"
 
 // MB level paramter
 #ifndef _BPU_VP8_WRAP_MB_H_

